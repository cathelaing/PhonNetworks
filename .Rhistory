distinct(Gloss, Speaker, .keep_all = T) %>%
group_by(corpus) %>%
summarise(mean_syl = mean(nsyl_target),
sd_syl = sd(nsyl_target),
max_syl = max(nsyl_target))
nsyls <- comparison_data %>%
distinct(Gloss, Speaker, .keep_all = T) %>%
group_by(corpus, nsyl_target) %>%
tally() %>%
pivot_wider(names_from = corpus, values_from = n)
syl.4 <- subset(nsyls, nsyl_target == 4)$French
all_words_L <- read_csv("Data/FULLsample_Lyon_all.csv") %>%
mutate(inCDI = ifelse(is.na(gloss1), F, T)) %>%
group_by(Speaker, Gloss, inCDI) %>% tally()
all_words_P <- read_csv("Data/FULLsample_Providence_all.csv") %>%
mutate(inCDI = ifelse(is.na(inCDI), F, inCDI)) %>%
group_by(Speaker, Gloss, inCDI) %>% tally()
all_words <- rbind(all_words_L, all_words_P)
single_tokens <- FULLsample %>% group_by(Speaker, Gloss) %>% tally() %>% filter(n==1)
multi_tokens <- FULLsample %>% group_by(Speaker, Gloss, Age, corpus) %>% tally() %>% ungroup() %>% group_by(Speaker, Gloss, corpus) %>% tally()
cap="Age (months) at first session, number of sessions and number of distinct word types produced by each child in the dataset. Means and SDs for each corpus are shown in bold."
#apa_table(table.data.overview, caption=cap, col_spanners=NULL, digits=0, placement="H", font_size="small")
kable(table.data.overview, "latex", booktabs=T, longtable=T,
caption=cap, digits=0, align="c")  %>%
kable_styling()%>%
row_spec(4, bold=F, hline_after=T) %>%
row_spec(5, bold=T, hline_after=F) %>%
row_spec(6, bold=T, hline_after=T) %>%
row_spec(11, bold=F,hline_after=T) %>%
row_spec(12, bold=T,hline_after=F) %>%
row_spec(13, bold=T,hline_after=T) %>%
row_spec(14, bold=T,hline_after=F) %>%
row_spec(15, bold=T,hline_after=F)
ntargetactual <- globalthresholds_AOP %>% group_by(data_type) %>% tally()
network_diff_A <- nrow(subset(full_thresholds, data_type == "actual")) - nrow(subset(globalthresholds_AOP, data_type == "actual"))
network_diff_T <- nrow(subset(full_thresholds, data_type == "target")) - nrow(subset(globalthresholds_AOP, data_type == "target"))
cap = "Visualisation of INT and EXT models of network growth. Shapes represent nodes in the network and filled lines represent edges between nodes. The two images demonstrate the likelihood of two new nodes - a filled triangle or an open circle - being added to the network under conditions of INT- and EXT-like network growth. In each case, the node that would be acquired is added to the network, and new edges are shown with dashed arrows. The double-dashed arrow in the INT model shows the new edge formed with the most highly-connected node in the existing network."
knitr::include_graphics("Images/INT-EXT.png")
stats.corr.all <- table.aop.deg.corr.speaker %>% summarise(mean_rho=mean(rho),
sd_rho=sd(rho))
stats.corr_Providence <- globalthresholds_AOP %>%
group_by(Speaker, corpus, data_type) %>%
summarize(rho=stats::cor.test(AOP, degree, method="sp")$estimate,
pval=stats::cor.test(AOP, degree, method="sp")$p.value
) %>%
ungroup() %>% group_by(corpus) %>%
summarise(mean_rho=mean(rho),
sd_rho=sd(rho)) %>%
filter(corpus == "English")
stats.corr_Lyon <- globalthresholds_AOP %>%
group_by(Speaker, corpus, data_type) %>%
summarize(rho=stats::cor.test(AOP, degree, method="sp")$estimate,
pval=stats::cor.test(AOP, degree, method="sp")$p.value
) %>%
ungroup() %>% group_by(corpus) %>%
summarise(mean_rho=mean(rho),
sd_rho=sd(rho)) %>%
filter(corpus == "French")
stats.corr.rand <- globalthresholds_AOP_rand %>%
summarize(rho=stats::cor.test(AOP, degree, method="sp")$estimate,
pval=stats::cor.test(AOP, degree, method="sp")$p.value
) %>%
ungroup()
aoa_na <- regression_data %>% filter(age == (AOP-1) & is.na(aoa_comp))
View(aoa_na)
aoa_na_types <- aoa_na %>% distinct(gloss1) %>% tally()
nrow(aoa_na)
View(aoa_na_types)
aoa_na_types <- aoa_na %>% distinct(gloss1)
aoa_na <- regression_data %>% filter(age == (AOP-1) & is.na(aoa_comp) & data_type == "target")
aoa_na_types <- aoa_na %>% distinct(gloss1) %>% tally()
aoa_na <- regression_data %>% filter(age == (AOP-1) & is.na(aoa_comp) & data_type == "target")
aoa_na_types <- aoa_na %>% distinct(gloss1) %>% tally()
source("prelims.R")
globalthresholds_AOP <- feather::read_feather("Data/globalthresholds_AOP.feather")
full_thresholds <- feather::read_feather("Data/full_thresholds.feather")
regression_data_lyon <- feather::read_feather("Data/regression_data_lyon.feather")
regression_data_providence <- feather::read_feather("Data/regression_data_providence.feather")
regression_data <- rbind(regression_data_lyon, regression_data_providence) %>%
group_by(Speaker, age) %>%
mutate(INT_z = scale(INT_val),
EXT_z = scale(EXT_target)) %>% ungroup()
regression_data <- rbind(regression_data_lyon, regression_data_providence) %>%
group_by(Speaker, age) %>%
mutate(INT_z = scale(INT_val),
EXT_z = scale(EXT_target)) %>% ungroup()
comparison_data_P <- read_csv("Data/comparison_data_providence.csv")
regression_data <- rbind(regression_data_lyon, regression_data_providence) %>%
group_by(Speaker, age) %>%
mutate(INT_z = scale(INT_val),
EXT_z = scale(EXT_target)) %>% ungroup()
comparison_data_P <- read_csv("Data/comparison_data_providence.csv")
comparison_data_L <- read_csv("Data/comparison_data_lyon.csv")
comparison_data <- rbind(comparison_data_P, comparison_data_L)
phon.dist.table <- read_csv("Data/phon_dist_table.csv")
comparison_data <- rbind(comparison_data_P, comparison_data_L)
phon.dist.table <- read_csv("Data/phon_dist_table.csv")
globalthresholds_corr <- read_csv("Data/globalthresholds_corr.csv") %>%
mutate(significant = ifelse(p.value<.05, "sig", "non-sig"))
all_distances <- read_csv("Data/all_distances.csv")
globalthresholds_corr <- read_csv("Data/globalthresholds_corr.csv") %>%
mutate(significant = ifelse(p.value<.05, "sig", "non-sig"))
all_distances <- read_csv("Data/all_distances.csv")
globalthresholds_AOP_thresholdstest <- feather::read_feather("Data/globalthresholds_AOP_thresholdstest.feather")
regression_data_lyon_thresholdstest <- feather::read_feather("ignore/large_files/regression_data_lyon_thresholdstest.feather")
regression_data_lyon_thresholdstest <- feather::read_feather("ignore/large_files/regression_data_lyon_thresholdstest.feather")
regression_data_providence_thresholdstest <- feather::read_feather("ignore/large_files/regression_data_providence_thresholdstest.feather")
regression_data_thresholdstest <- rbind(regression_data_lyon_thresholdstest,
regression_data_providence_thresholdstest) %>%
mutate(threshold = as.numeric(threshold)) %>% ungroup()
source("PhonologicalNetworks-Tables-SI.R")
stat_sum_df <- function(fun, geom="crossbar", ...) {
stat_summary(fun.data=fun, colour="red", geom=geom, width=0.2, ...)
}
stat_sum_df <- function(fun, geom="crossbar", ...) {
stat_summary(fun.data=fun, colour="red", geom=geom, width=0.2, ...)
}
data_type_plot_speaker <- ggplot(data = subset(regression_data, age == (AOP-1)),
aes(x = age, y = INT_scaled, colour = data_type)) +
geom_point(shape = 21, position = position_jitter(.1)) +
geom_smooth(aes(fill = data_type)) +
ylab("INT value (normalised)") +
xlab("Age (months)") +
theme_bw(base_size = 10) +
theme(legend.title = element_blank()) +
facet_wrap(~Speaker, ncol=3)
data_type_plot_speaker
table.model.3 <- cbind(table.model3_A, table.model3_T)
reg_dat <- regression_data[which(complete.cases(regression_data[,c('EXT_scaled_target',
'INT_scaled',
'INT_z',
'EXT_z',
'length_scaled',
'freq_scaled',
'aoa_scaled',
'age_scaled',
'tokens_scaled',
'corpus',
'AOP',
'category')])),]
reg_dat_scaled <- reg_dat %>% group_by(Speaker, age) %>% mutate(INT_z = scale(INT_val),
EXT_z = scale(EXT_target))
model3_A <- glmer(learned_next ~
INT_z*age_scaled +
EXT_z*age_scaled +
length_scaled*age_scaled +
freq_scaled*age_scaled +
aoa_scaled*age_scaled +
corpus +
category +
(1+age_scaled|Speaker),
family=binomial("logit"),
control=glmerControl(calc.derivs=FALSE,
optimizer="bobyqa",
optCtrl=list(maxfun=2e5)),
data=subset(reg_dat_scaled, data_type == "actual"))
confint.model3_A <- tidy(model3_A,effects="fixed",conf.int=TRUE) %>%
select(term, conf.low, conf.high) %>%
mutate(across(where(is.numeric), round, 2)) %>%
unite(`95% CI`, c(conf.low, conf.high), sep = ",",)
confint.model3_A$`95% CI` <- paste0("[", confint.model3_A$`95% CI`, "]")
model.summary_A <- summary(model3_A)
model3_A_tab <- model.summary_A$coefficients %>%
as.data.frame %>%
rename(
"b"="Estimate"
, "SE"="Std. Error"
, "z"="z value"
, "p"="Pr(>|z|)") %>%
mutate(
Effect=papaja:::beautify_terms(rownames(.))
)
table.model3_A <- model3_A_tab %>%
printnum(
digits=c(2, 2, 2, 3)
, gt1=c(TRUE, TRUE, TRUE, TRUE)
, zero=c(TRUE, TRUE, TRUE, TRUE)
) %>%
rownames_to_column(var = "term") %>%
left_join(confint.model3_A) %>%
select(Effect, `b`, `SE`, `z`, `p`, `95% CI`) %>%
rename("beta"=`b`) %>%
mutate(beta=as.numeric(beta),
SE=as.numeric(SE),
`z`=as.numeric(`z`),
`p`=as.numeric(`p`),
p=scales::pvalue(p))
model3_T <- glmer(learned_next ~
INT_z*age_scaled +
EXT_z*age_scaled +
length_scaled*age_scaled +
freq_scaled*age_scaled +
aoa_scaled*age_scaled +
corpus +
category +
(1+age_scaled|Speaker),
family=binomial("logit"),
control=glmerControl(calc.derivs=FALSE,
optimizer="bobyqa",
optCtrl=list(maxfun=2e5)),
data=subset(reg_dat, data_type == "target"))
confint.model3_T <- tidy(model3_T,effects="fixed",conf.int=TRUE) %>%
select(term, conf.low, conf.high) %>%
mutate(across(where(is.numeric), round, 2)) %>%
unite(`95% CI`, c(conf.low, conf.high), sep = ",",)
confint.model3_T$`95% CI` <- paste0("[", confint.model3_T$`95% CI`, "]")
model.summary_T <- summary(model3_T)
model3_T_tab <- model.summary_T$coefficients %>%
as.data.frame %>%
rename(
"b"="Estimate"
, "SE"="Std. Error"
, "z"="z value"
, "p"="Pr(>|z|)") %>%
mutate(
Effect=papaja:::beautify_terms(rownames(.))
)
table.model3_T <- model3_T_tab %>%
printnum(
digits=c(2, 2, 2, 3)
, gt1=c(TRUE, TRUE, TRUE, TRUE)
, zero=c(TRUE, TRUE, TRUE, TRUE)
) %>%
rownames_to_column(var = "term") %>%
left_join(confint.model3_T) %>%
select(Effect, `b`, `SE`, `z`, `p`, `95% CI`) %>%
rename("beta"=`b`) %>%
mutate(beta=as.numeric(beta),
SE=as.numeric(SE),
`z`=as.numeric(`z`),
`p`=as.numeric(`p`),
p=scales::pvalue(p))
rownames(table.model3_T) <- NULL
table.model.3 <- cbind(table.model3_A, table.model3_T)
table.model.summary <- table.model.3[,-7]
rownames(table.model.summary) <- NULL
table.model.3 <- cbind(table.model3_A, table.model3_T)
table.model.summary <- table.model.3[,-6]
table.model.summary.full <- table.model.summary %>% mutate(Effect=fct_recode(Effect,
`EXT value`="EXT z",
`INT value`="INT z",
Age="Age scaled",
AoA="Aoa scaled",
Length="Length scaled",
`Input frequency`="Freq scaled",
`Corpus` = "CorpusEnglish",
`Category: object words` = "Categoryobject word",
`Category: connecting words` = "Categoryconnecting words",
`Category: adjectives` = "Categorydescriptive words",
`Category: games/routines` = "Categorygames routines",
`Category: prepositions` = "Categoryprepositions",
`Category: pronouns` = "Categorypronouns",
`Category: quantifiers` = "Categoryquantifiers",
`Category: question words` = "Categoryquestion words",
`Category: onomatopoeia`= "Categorysounds",
`Category: time` = "Categorytime words",
`Category: locations` = "Categorylocations",
`Age x AoA`="Age scaled $\\times$ Aoa scaled",
`Age x Length`="Age scaled $\times$ Length scaled",
`Age x Input frequency`="Age scaled $\\times$ Freq scaled",
`Age x EXT`="Age scaled $\\times$ EXT z",
`Age x INT`="INT z $\\times$ Age scaled"))
var_order <- c("Intercept", "INT value", "EXT value", "Age", "AoA", "Length", "Input frequency", "Corpus", "Category",
"Age x INT",
"Age x EXT",
"Age x AoA",
"Age x Length",
"Age x Input frequency")
table.model.summary <- table.model.summary.full %>%
arrange(factor(Effect, levels = var_order))
rownames(table.model.summary.full) <- NULL
View(table.model.summary.full)
table.model.3 <- cbind(table.model3_A, table.model3_T)
View(table.model.3)
table.model.summary <- table.model.3[,-7]
table.model.summary.full <- table.model.summary %>% mutate(Effect=fct_recode(Effect,
`EXT value`="EXT z",
`INT value`="INT z",
Age="Age scaled",
AoA="Aoa scaled",
Length="Length scaled",
`Input frequency`="Freq scaled",
`Corpus` = "CorpusEnglish",
`Category: object words` = "Categoryobject word",
`Category: connecting words` = "Categoryconnecting words",
`Category: adjectives` = "Categorydescriptive words",
`Category: games/routines` = "Categorygames routines",
`Category: prepositions` = "Categoryprepositions",
`Category: pronouns` = "Categorypronouns",
`Category: quantifiers` = "Categoryquantifiers",
`Category: question words` = "Categoryquestion words",
`Category: onomatopoeia`= "Categorysounds",
`Category: time` = "Categorytime words",
`Category: locations` = "Categorylocations",
`Age x AoA`="Age scaled $\\times$ Aoa scaled",
`Age x Length`="Age scaled $\times$ Length scaled",
`Age x Input frequency`="Age scaled $\\times$ Freq scaled",
`Age x EXT`="Age scaled $\\times$ EXT z",
`Age x INT`="INT z $\\times$ Age scaled"))
table.model.summary.full <- table.model.summary %>% mutate(Effect=fct_recode(Effect,
`EXT value`="EXT z",
`INT value`="INT z",
Age="Age scaled",
AoA="Aoa scaled",
Length="Length scaled",
`Input frequency`="Freq scaled",
`Corpus` = "CorpusEnglish",
`Category: object words` = "Categoryobject word",
`Category: connecting words` = "Categoryconnecting words",
`Category: adjectives` = "Categorydescriptive words",
`Category: games/routines` = "Categorygames routines",
`Category: prepositions` = "Categoryprepositions",
`Category: pronouns` = "Categorypronouns",
`Category: quantifiers` = "Categoryquantifiers",
`Category: question words` = "Categoryquestion words",
`Category: onomatopoeia`= "Categorysounds",
`Category: time` = "Categorytime words",
`Category: locations` = "Categorylocations",
`Age x AoA`="Age scaled $\\times$ Aoa scaled",
`Age x Length`="Age scaled $\\times$ Length scaled",
`Age x Input frequency`="Age scaled $\\times$ Freq scaled",
`Age x EXT`="Age scaled $\\times$ EXT z",
`Age x INT`="INT z $\\times$ Age scaled"))
table.model.summary.full <- table.model.summary %>% mutate(Effect=fct_recode(Effect,
`EXT value`="EXT z",
`INT value`="INT z",
Age="Age scaled",
AoA="Aoa scaled",
Length="Length scaled",
`Input frequency`="Freq scaled",
`Corpus` = "CorpusEnglish",
`Category: verbs` = "Categoryverbs",
`Category: object words` = "Categoryobject word",
`Category: connecting words` = "Categoryconnecting words",
`Category: adjectives` = "Categorydescriptive words",
`Category: games/routines` = "Categorygames routines",
`Category: prepositions` = "Categoryprepositions",
`Category: pronouns` = "Categorypronouns",
`Category: quantifiers` = "Categoryquantifiers",
`Category: question words` = "Categoryquestion words",
`Category: onomatopoeia`= "Categorysounds",
`Category: time` = "Categorytime words",
`Category: locations` = "Categorylocations",
`Age x AoA`="Age scaled $\\times$ Aoa scaled",
`Age x Length`="Age scaled $\\times$ Length scaled",
`Age x Input frequency`="Age scaled $\\times$ Freq scaled",
`Age x EXT`="Age scaled $\\times$ EXT z",
`Age x INT`="INT z $\\times$ Age scaled"))
var_order <- c("Intercept", "INT value", "EXT value", "Age", "AoA", "Length", "Input frequency", "Corpus",
"Category: verbs",
"Category: object words",
"Category: connecting words",
"Category: adjectives",
"Category: games/routines",
"Category: prepositions",
"Category: pronouns",
"Category: quantifiers",
"Category: question words",
"Category: onomatopoeia",
"Category: time",
"Category: locations",
"Age x INT",
"Age x EXT",
"Age x AoA",
"Age x Length",
"Age x Input frequency")
table.model.summary <- table.model.summary.full %>%
arrange(factor(Effect, levels = var_order))
View(table.model.summary)
table.model.summary <- table.model.3[,-7]
table.model.summary <- table.model.summary %>% mutate(Effect=fct_recode(Effect,
`EXT value`="EXT z",
`INT value`="INT z",
Age="Age scaled",
AoA="Aoa scaled",
Length="Length scaled",
`Input frequency`="Freq scaled",
`Corpus` = "CorpusEnglish",
`Category: verbs` = "Categoryverbs",
`Category: object words` = "Categoryobject word",
`Category: connecting words` = "Categoryconnecting words",
`Category: adjectives` = "Categorydescriptive words",
`Category: games/routines` = "Categorygames routines",
`Category: prepositions` = "Categoryprepositions",
`Category: pronouns` = "Categorypronouns",
`Category: quantifiers` = "Categoryquantifiers",
`Category: question words` = "Categoryquestion words",
`Category: onomatopoeia`= "Categorysounds",
`Category: time` = "Categorytime words",
`Category: locations` = "Categorylocations",
`Age x AoA`="Age scaled $\\times$ Aoa scaled",
`Age x Length`="Age scaled $\\times$ Length scaled",
`Age x Input frequency`="Age scaled $\\times$ Freq scaled",
`Age x EXT`="Age scaled $\\times$ EXT z",
`Age x INT`="INT z $\\times$ Age scaled"))
var_order <- c("Intercept", "INT value", "EXT value", "Age", "AoA", "Length", "Input frequency", "Corpus",
"Category: verbs",
"Category: object words",
"Category: connecting words",
"Category: adjectives",
"Category: games/routines",
"Category: prepositions",
"Category: pronouns",
"Category: quantifiers",
"Category: question words",
"Category: onomatopoeia",
"Category: time",
"Category: locations",
"Age x INT",
"Age x EXT",
"Age x AoA",
"Age x Length",
"Age x Input frequency")
table.model.summary.full <- table.model.summary.full %>%
arrange(factor(Effect, levels = var_order))
rownames(table.model.summary.full) <- NULL
thresholds_corr
thresholds_corr <- ggplot(subset(globalthresholds_corr, !is.na(estimate)),
aes(x = threshold, y = as.numeric(estimate), colour = corpus, shape = significant)) +
geom_point() +
scale_shape_manual(values = c(1, 16)) +
ylab("Spearman's rho") +
xlab("Threshold") +
guides(color=guide_legend(""), shape = "none") +
theme_bw() +
geom_vline(xintercept = 0.25, linetype = "twodash", colour = "darkgrey") +
facet_wrap(~data_type, ncol=2)
thresholds_corr
data_type_plot_bysubj <- ggplot(data = subset(regression_data, age == (AOP-1)), aes(x = age, y = INT_scaled, colour = data_type)) +
geom_point(shape = 21, position = position_jitter(.1)) +
geom_smooth(aes(fill = data_type)) +
ylab("INT value (normalised)") +
xlab("Age (months)") +
theme_bw(base_size = 18) +
theme(legend.title = element_blank()) +
facet_wrap(~Speaker, ncol=3)
data_type_plot_bysubj
data_type_plot_bysubj <- ggplot(data = subset(regression_data, age == (AOP-1)), aes(x = age, y = INT_scaled, colour = data_type)) +
geom_point(shape = 21, position = position_jitter(.1)) +
geom_smooth(aes(fill = data_type)) +
ylab("INT value (normalised)") +
xlab("Age (months)") +
theme_bw(base_size = 12) +
theme(legend.title = element_blank()) +
facet_wrap(~Speaker, ncol=3)
data_type_plot_bysubj
data_type_plot_speaker <- ggplot(data = subset(regression_data, age == (AOP-1)),
aes(x = age, y = INT_scaled, colour = data_type)) +
geom_point(shape = 21, position = position_jitter(.1)) +
geom_smooth(aes(fill = data_type)) +
ylab("INT value (normalised)") +
xlab("Age (months)") +
theme_bw(base_size = 10) +
theme(legend.title = element_blank()) +
facet_wrap(~Speaker, ncol=3)
data_type_plot_speaker
cor_deg_AOP.fig <- ggplot(globalthresholds_AOP,
aes(x = AOP, y = degree, colour = data_type)) +
geom_rect(data = subset(globalthresholds_AOP ,corpus == 'French'), aes(fill = corpus),xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf,alpha = 0.08, fill = "gray88") +
geom_point(shape = 21, size = 1, alpha = 0.5, position = position_jitter(.02)) +
scale_x_continuous(breaks = seq(from = 10, to = 30, by = 10)) +
# scale_x_discrete(breaks=NULL) +
# scale_y_discrete(breaks=NULL) +
geom_smooth(method=lm,
se=FALSE, size = 2) +
ylab("degree (z-score)") +
theme_bw() +
theme(axis.text=element_text(size=12),
legend.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(size = 8),
#legend.position = "top",
strip.text = element_text(size=9),
strip.background = element_rect(colour="black",size=1),
strip.text.x = element_text(margin = margin(.1, 0, .1, 0, "cm"))) +
facet_wrap(~Speaker, ncol=3)
cor_deg_AOP.fig
View(phon.dist.table)
col_baby <- phon.dist.table %>% unite(baby,
Gloss.x, IPAtarget.x,
sep = " /", remove = TRUE) %>%
filter(word_pos == "S1C1") %>%
dplyr::select(baby)
col_baby<- paste0(col_baby, "/")
col_balloon <- phon.dist.table %>% unite(balloon,
Gloss.y, IPAtarget.y,
sep = " /", remove = TRUE) %>%
filter(word_pos == "S1C1") %>%
dplyr::select(balloon)
stri_sub(col_balloon, 14, 1) <- ":"
col_balloon<- paste0(col_balloon, "/")
col_sky <- phon.dist.table %>% unite(sky,
Gloss, IPAtarget,
sep = " /", remove = TRUE) %>%
filter(word_pos == "S1C1") %>%
dplyr::select(sky)
col_sky<- paste0(col_sky, "/")
sum_sq_diffs <- c("S1C1", "S1C2", "S2C1", "SFC1", "Phonological Distance ($\\sum\\sqrt\\text{total}$)")
phon.dist.table.final <- phon.dist.table %>%
mutate(word_pos = sum_sq_diffs) %>% dplyr::select(word_pos,
consonant.x, features.x,
consonant.y, features.y, sum_sq_diffs_balloon,
consonant, features, sum_sq_diffs_sky) %>%
mutate(consonant.x = ifelse(is.na(consonant.x), " ", consonant.x),
features.x = ifelse(is.na(features.x), " ", features.x),
consonant.y = ifelse(is.na(consonant.y), " ", consonant.y),
features.y = ifelse(is.na(features.y), " ", features.y),
consonant = ifelse(is.na(consonant), " ", consonant),
features = ifelse(is.na(features), " ", features))
View(phon.dist.table.final)
