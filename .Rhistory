optimizer="bobyqa",
optCtrl=list(maxfun=2e5)),
da
model1_A <- glmer(learned_next ~
#corpus +
INT_scaled*age_scaled*freq_scaled +
(1+age_scaled|Speaker),
family=binomial("logit"),
control=glmerControl(calc.derivs=FALSE,
optimizer="bobyqa",
optCtrl=list(maxfun=2e5)),
data=data_CG)
anova(model0_A, model1_A)
summary(model1_A)
model0_A <- glmer(learned_next ~
freq_scaled*age +
(1+age|Speaker),
family=binomial("logit"),
control=glmerControl(calc.derivs=FALSE,
optimizer="bobyqa",
optCtrl=list(maxfun=2e5)),
data=data_CG)
model1_A <- glmer(learned_next ~
#corpus +
INT_scaled*age*freq_scaled +
(1+age|Speaker),
family=binomial("logit"),
control=glmerControl(calc.derivs=FALSE,
optimizer="bobyqa",
optCtrl=list(maxfun=2e5)),
data=data_CG)
anova(model0_A, model1_A)
source("prelims.R")
data_CG <- read_feather("Data/regression_data_CG.feather")
model0_A <- glmer(learned_next ~
freq_scaled*age +
(1+age|Speaker),
family=binomial("logit"),
control=glmerControl(calc.derivs=FALSE,
optimizer="bobyqa",
optCtrl=list(maxfun=2e5)),
data=data_CG)
View(data_CG)
model0_A <- glmer(learned_next ~
freq_scaled*age +
(1+age|Speaker),
family=binomial("logit"),
control=glmerControl(calc.derivs=FALSE,
optimizer="bobyqa",
optCtrl=list(maxfun=2e5)),
data=data_CG)
model1_A <- glmer(learned_next ~
#corpus +
INT_scaled*age*freq_scaled +
(1+age|Speaker),
family=binomial("logit"),
control=glmerControl(calc.derivs=FALSE,
optimizer="bobyqa",
optCtrl=list(maxfun=2e5)),
data=data_CG)
anova(model0_A, model1_A)
model0_A <- glmer(learned_next ~
freq_scaled*AOP_scaled +
(1+AOP_scaled|Speaker),
family=binomial("logit"),
control=glmerControl(calc.derivs=FALSE,
optimizer="bobyqa",
optCtrl=list(maxfun=2e5)),
data=data_CG)
model1_A <- glmer(learned_next ~
#corpus +
INT_scaled*AOP_scaled*freq_scaled +
(1+AOP_scaled|Speaker),
family=binomial("logit"),
control=glmerControl(calc.derivs=FALSE,
optimizer="bobyqa",
optCtrl=list(maxfun=2e5)),
data=data_CG)
anova(model0_A, model1_A)
summary(model1_A)
model0_A <- glmer(learned_next ~
freq_scaled*AOP +
(1+AOP|Speaker),
family=binomial("logit"),
control=glmerControl(calc.derivs=FALSE,
optimizer="bobyqa",
optCtrl=list(maxfun=2e5)),
data=data_CG)
model1_A <- glmer(learned_next ~
#corpus +
INT_scaled*AOP*freq_scaled +
(1+AOP|Speaker),
family=binomial("logit"),
control=glmerControl(calc.derivs=FALSE,
optimizer="bobyqa",
optCtrl=list(maxfun=2e5)),
data=data_CG)
anova(model0_A, model1_A)
model1_A <- glmer(AOP ~
#corpus +
INT_scaled*freq_scaled +
(1|Speaker),
family=binomial("logit"),
control=glmerControl(calc.derivs=FALSE,
optimizer="bobyqa",
optCtrl=list(maxfun=2e5)),
data=data_CG)
model1_A <- lmer(AOP ~
#corpus +
INT_scaled*freq_scaled +
(1|Speaker),
#family=binomial("logit"),
control=glmerControl(calc.derivs=FALSE,
optimizer="bobyqa",
optCtrl=list(maxfun=2e5)),
data=data_CG)
model1_A <- lmer(AOP ~
#corpus +
INT_scaled*freq_scaled +
(1|Speaker),
# control=glmerControl(calc.derivs=FALSE,
#                      optimizer="bobyqa",
#                      optCtrl=list(maxfun=2e5)),
data=data_CG, REML = F)
summary(model1_A)
model1_A <- lmer(AOP_scaled ~
#corpus +
INT_scaled*freq_scaled +
(1|Speaker),
# control=glmerControl(calc.derivs=FALSE,
#                      optimizer="bobyqa",
#                      optCtrl=list(maxfun=2e5)),
data=data_CG, REML = F)
summary(model1_A)
model1_A <- glmer(learned_next ~
#corpus +
INT_scaled*AOP_scaled*freq_scaled +
(1+AOP_scaled|Speaker),
family=binomial("logit"),
control=glmerControl(calc.derivs=FALSE,
optimizer="bobyqa",
optCtrl=list(maxfun=2e5)),
data=data_CG)
summary(model1_A)
model0_A <- glmer(learned_next ~
freq_scaled + age_scaled +
(1+age_scaled|Speaker),
family=binomial("logit"),
control=glmerControl(calc.derivs=FALSE,
optimizer="bobyqa",
optCtrl=list(maxfun=2e5)),
data=data_CG)
model0_A <- glmer(learned_next ~
freq_scaled + age_scaled +
(1+age_scaled|Speaker),
family=binomial("logit"),
control=glmerControl(calc.derivs=FALSE,
optimizer="bobyqa",
optCtrl=list(maxfun=2e5)),
data=data_CG)
model1_A <- glmer(learned_next ~
#corpus +
INT_scaled + age_scaled + freq_scaled +
(1+age_scaled|Speaker),
family=binomial("logit"),
control=glmerControl(calc.derivs=FALSE,
optimizer="bobyqa",
optCtrl=list(maxfun=2e5)),
data=data_CG)
anova(model0_A, model1_A)
summary(model1_A)
model1_A <- glmer(learned_next ~
#corpus +
INT_scaled +#
*age_scaled*freq_scaled +
model1_A <- glmer(learned_next ~
#corpus +
INT_scaled +
#*age_scaled*freq_scaled +
(1+age_scaled|Speaker),
family=binomial("logit"),
control=glmerControl(calc.derivs=FALSE,
optimizer="bobyqa",
optCtrl=list(maxfun=2e5)),
data=data_CG)
summary(model1_A)
data_CG%>% filter(learned_next ==1) %>% tally()
model1_A <- glmer(learned_next ~
#corpus +
INT_scaled + age_scaled +#*freq_scaled +
(1+age_scaled|Speaker),
family=binomial("logit"),
control=glmerControl(calc.derivs=FALSE,
optimizer="bobyqa",
optCtrl=list(maxfun=2e5)),
data=data_CG)
summary(model1_A)
plot(age_scaled, INT_scaled)
plot(data_CG$age_scaled, data_CG$INT_scaled)
globalthresholds_AOP_CG <- read_feather("Data/globalthresholds_AOP_CG.feather")
View(globalthresholds_AOP_CG)
globalthresholds_AOP_CG <- read_feather("Data/globalthresholds_AOP_CG.feather") %>% filter(threshold == 0.25)
cor.test(globalthresholds_AOP_CG$AOP, globalthresholds_AOP_CG$degree, method="sp")
plot(globalthresholds_AOP_CG$AOP, globalthresholds_AOP_CG$degree)
ggplot(globalthresholds_AOP_CG, aes(x = AOP, y = degree)) + geom_smooth
ggplot(globalthresholds_AOP_CG, aes(x = AOP, y = degree)) + geom_smooth()
data_CG <- data_CG %>% mutate(INT_z = (INT_val-mean(INT_val))/sd(INT_val))
data_CG <- data_CG %>%
group_by(Speaker, age) %>%
mutate(INT_z = (INT_val-mean(INT_val))/sd(INT_val))
model1_A <- glmer(learned_next ~
#corpus +
INT_z + age_scaled +#*freq_scaled +
(1+age_scaled|Speaker),
family=binomial("logit"),
control=glmerControl(calc.derivs=FALSE,
optimizer="bobyqa",
optCtrl=list(maxfun=2e5)),
data=data_CG)
summary(model1_A)
data_CG <- data_CG %>%
group_by(Speaker, AOP) %>%
mutate(INT_z = (INT_val-mean(INT_val))/sd(INT_val))
model1_A <- glmer(learned_next ~
#corpus +
INT_z + age_scaled +#*freq_scaled +
(1+age_scaled|Speaker),
family=binomial("logit"),
control=glmerControl(calc.derivs=FALSE,
optimizer="bobyqa",
optCtrl=list(maxfun=2e5)),
data=data_CG)
summary(model1_A)
data_CG %>% group_by(Speaker, AOP) %>% tally()
data_CG %>% group_by(Speaker) %>% tally()
data_CG %>% group_by(Speaker, age, gloss1) %>% tally()
data_CG %>% group_by(Speaker, age) %>% tally()
data_CG %>% group_by(Speaker, AOP) %>% tally()
data_CG %>% distinct(Spekaer, AOP, gloss1) %>% group_by(Speaker, AOP) %>% tally()
data_CG %>% distinct(Speaker, AOP, gloss1) %>% group_by(Speaker, AOP) %>% tally()
data_CG <- data_CG %>%
filter(age>17) %>%
group_by(Speaker, AOP) %>%
mutate(INT_z = (INT_val-mean(INT_val))/sd(INT_val))
data_CG %>% group_by(learned_next) %>% tally()
model0_A <- glmer(learned_next ~
freq_scaled * age_scaled +
(1+age_scaled|Speaker),
family=binomial("logit"),
control=glmerControl(calc.derivs=FALSE,
optimizer="bobyqa",
optCtrl=list(maxfun=2e5)),
data=data_CG)
model1_A <- glmer(learned_next ~
#corpus +
INT_z * age_scaled +
freq_scaled * age_scaled +
(1+age_scaled|Speaker),
family=binomial("logit"),
control=glmerControl(calc.derivs=FALSE,
optimizer="bobyqa",
optCtrl=list(maxfun=2e5)),
data=data_CG)
anova(model0_A, model1_A)
summary(model1_A)
data_CG <- data_CG %>%
filter(age>18) %>%
group_by(Speaker, AOP) %>%
mutate(INT_z = (INT_val-mean(INT_val))/sd(INT_val))
data_CG %>% group_by(learned_next) %>% tally()
model0_A <- glmer(learned_next ~
freq_scaled * age_scaled +
(1+age_scaled|Speaker),
family=binomial("logit"),
control=glmerControl(calc.derivs=FALSE,
optimizer="bobyqa",
optCtrl=list(maxfun=2e5)),
data=data_CG)
model1_A <- glmer(learned_next ~
#corpus +
INT_z * age_scaled +
freq_scaled * age_scaled +
(1+age_scaled|Speaker),
family=binomial("logit"),
control=glmerControl(calc.derivs=FALSE,
optimizer="bobyqa",
optCtrl=list(maxfun=2e5)),
data=data_CG)
anova(model0_A, model1_A)
summary(model1_A)
data_CG <- data_CG %>%
filter(age>19) %>%
group_by(Speaker, AOP) %>%
mutate(INT_z = (INT_val-mean(INT_val))/sd(INT_val))
model0_A <- glmer(learned_next ~
freq_scaled * age_scaled +
(1+age_scaled|Speaker),
family=binomial("logit"),
control=glmerControl(calc.derivs=FALSE,
optimizer="bobyqa",
optCtrl=list(maxfun=2e5)),
data=data_CG)
model1_A <- glmer(learned_next ~
#corpus +
INT_z * age_scaled +
freq_scaled * age_scaled +
(1+age_scaled|Speaker),
family=binomial("logit"),
control=glmerControl(calc.derivs=FALSE,
optimizer="bobyqa",
optCtrl=list(maxfun=2e5)),
data=data_CG)
anova(model0_A, model1_A)
summary(model1_A)
model1_A <- glmer(learned_next ~
#corpus +
INT_z * freq_scaled * age_scaled +
(1+age_scaled|Speaker),
family=binomial("logit"),
control=glmerControl(calc.derivs=FALSE,
optimizer="bobyqa",
optCtrl=list(maxfun=2e5)),
data=data_CG)
anova(model0_A, model1_A)
summary(model1_A)
data_CG_older <- data_CG %>%
filter(AOP>19) %>%
group_by(Speaker, AOP) %>%
mutate(INT_z = (INT_val-mean(INT_val))/sd(INT_val))
data_CG_younger <- data_CG %>%
filter(AOP<20) %>%
group_by(Speaker, AOP) %>%
mutate(INT_z = (INT_val-mean(INT_val))/sd(INT_val))
View(data_CG_younger)
data_CG <- read_feather("Data/regression_data_CG.feather")
data_CG_older <- data_CG %>%
filter(AOP>19) %>%
group_by(Speaker, AOP) %>%
mutate(INT_z = (INT_val-mean(INT_val))/sd(INT_val))
data_CG_younger <- data_CG %>%
filter(AOP<20) %>%
group_by(Speaker, AOP) %>%
mutate(INT_z = (INT_val-mean(INT_val))/sd(INT_val))
data_CG_older <- data_CG %>%
filter(AOP>19 & age > 19) %>%
group_by(Speaker, AOP) %>%
mutate(INT_z = (INT_val-mean(INT_val))/sd(INT_val))
data_CG_older <- data_CG %>%
filter(AOP>19) %>%
group_by(Speaker, AOP) %>%
mutate(INT_z = (INT_val-mean(INT_val))/sd(INT_val))
data_CG_older %>% group_by(learned_next) %>% tally()
data_CG_older <- data_CG %>%
filter(AOP>19) %>%
group_by(Speaker, AOP) %>%
mutate(INT_z = (INT_val-mean(INT_val))/sd(INT_val))
data_CG_older <- data_CG %>%
filter(age>19) %>%
group_by(Speaker, AOP) %>%
mutate(INT_z = (INT_val-mean(INT_val))/sd(INT_val))
data_CG_younger <- data_CG %>%
filter(AOP<20) %>%
group_by(Speaker, AOP) %>%
mutate(INT_z = (INT_val-mean(INT_val))/sd(INT_val))
model1_A <- glmer(learned_next ~
#corpus +
INT_scaled * freq_scaled * age_scaled +
(1+age_scaled|Speaker),
family=binomial("logit"),
control=glmerControl(calc.derivs=FALSE,
optimizer="bobyqa",
optCtrl=list(maxfun=2e5)),
data=data_CG_younger)
source("prelims.R")
r_refs(file="r-references.bib")
my_citations <- cite_r(
file="r-references.bib"
, pkgs=c("tidyverse", "igraph", "papaja", "lmerTest")
, withhold=FALSE
, footnote=TRUE
)
# load files
globalthresholds_AOP <- feather::read_feather("Data/globalthresholds_AOP.feather")
full_thresholds <- feather::read_feather("Data/full_thresholds.feather")
regression_data_lyon <- feather::read_feather("Data/regression_data_lyon.feather")
regression_data_providence <- feather::read_feather("Data/regression_data_providence.feather")
regression_data <- rbind(regression_data_lyon, regression_data_providence)
comparison_data_P <- read_csv("Data/comparison_data_providence.csv")
comparison_data_L <- read_csv("Data/comparison_data_lyon.csv")
comparison_data <- rbind(comparison_data_P, comparison_data_L)
all_distances <- read_csv("Data/all_distances.csv")
globalthresholds_AOP_rand <- read_feather("Data/globalthresholds_AOP_rand.feather") %>% filter(threshold == 0.25 & data_type == "target")
FULLsample <- read_csv("Data/FULLsample.csv")
source("PhonologicalNetworks-Figures.R")
source("PhonologicalNetworks-Tables.R")
stat_sum_df <- function(fun, geom="crossbar", ...) {
stat_summary(fun.data=fun, colour="red", geom=geom, width=0.2, ...)
}
types.corpus <- regression_data %>%
group_by(corpus, Speaker) %>%
distinct(gloss1, .keep_all=T) %>%
tally() %>% summarise(n=sum(n))
types <- regression_data %>%
group_by(Speaker) %>%
distinct(gloss1, .keep_all=T) %>%
tally() %>% summarise(n=sum(n))
tokens <- regression_data %>%
summarise(mean_tok=mean(n_tokens),
sd_tok = sd(n_tokens))
syls <- comparison_data %>%
distinct(Gloss, Speaker, .keep_all = T) %>%
group_by(corpus) %>%
summarise(mean_syl = mean(nsyl_target),
sd_syl = sd(nsyl_target),
max_syl = max(nsyl_target))
nsyls <- comparison_data %>%
distinct(Gloss, Speaker, .keep_all = T) %>%
group_by(corpus, nsyl_target) %>%
tally() %>%
pivot_wider(names_from = corpus, values_from = n)
syl.4 <- subset(nsyls, nsyl_target == 4)$French
all_words_L <- read_csv("Data/FULLsample_Lyon_all.csv") %>%
mutate(inCDI = ifelse(is.na(gloss1), F, T)) %>%
group_by(Speaker, Gloss, inCDI) %>% tally()
all_words_P <- read_csv("Data/FULLsample_Providence_all.csv") %>%
mutate(inCDI = ifelse(is.na(inCDI), F, inCDI)) %>%
group_by(Speaker, Gloss, inCDI) %>% tally()
all_words <- rbind(all_words_L, all_words_P)
single_tokens <- FULLsample %>% group_by(Speaker, Gloss) %>% tally() %>% filter(n==1)
multi_tokens <- FULLsample %>% group_by(Speaker, Gloss, Age, corpus) %>% tally() %>% ungroup() %>% group_by(Speaker, Gloss, corpus) %>% tally()
round(types$n)
round(tokens$mean_tok)
tokens
regression_data %>%
summarise(mean_tok=mean(n_tokens),
sd_tok = sd(n_tokens))
View(regression_data)
tokens <- regression_data %>%
summarise(mean_tok=mean(n_tokens, na.rm=T),
sd_tok = sd(n_tokens, na.rm=T))
tokens
round(types$n)
IDSdata <- read_csv("G:/My Drive/Research/Published papers/PhD/Dropbox files/PhD/Data/IDS/IDSdata.csv") %>%
rename(OWCW = `OW/CW`) %>%
filter(!is.na(OWCW)) %>%
mutate(OWCW = recode_factor(OWCW,
"OW" = "Onomatopoeia",
"CW" = "Conventional"))
PitchPlot <- ggplot(data = subset(IDSdata, MeanPitch > 99), mapping = aes(x = OWCW, y = log(MeanPitch))) +
geom_rect(ymin = 165, ymax = 255,
xmin = -Inf, xmax = Inf, fill = 'grey') +
geom_violin(aes(fill = OWCW)) +
geom_point(shape = 1, size = 4, position = position_jitter(.1), colour = "gray30") +
stat_summary(fun.y=mean, geom = "point", aes(group = Target), shape = 21, fill = "lightgrey", size=5,
position = position_jitter(width = .1, height=0)) +
stat_summary(fun.data=mean_se, geom = "pointrange", aes(group = OWCW), size = 1.5, colour = "red", shape = 17) +
scale_fill_manual(values=c("#CC6666", "#66CC99")) +
theme_bw(base_size=15) +
ylim(0, 800) +
# scale_x_discrete(breaks=c("CW", "OW"), labels=c("Conventional", "Onomatopoeia")) +
xlab("") +
ylab("Mean Pitch (HZ)") +
theme(legend.position = "none",
axis.title = element_text(size=22),
axis.text = element_text(size=22),
strip.text = element_text(face="bold", size=22,lineheight=7.0))
plot(PitchPlot)
PitchPlot <- ggplot(data = subset(IDSdata, MeanPitch > 99), mapping = aes(x = OWCW, y = log(MeanPitch))) +
geom_rect(ymin = 165, ymax = 255,
xmin = -Inf, xmax = Inf, fill = 'grey') +
geom_violin(aes(fill = OWCW)) +
geom_point(shape = 1, size = 4, position = position_jitter(.1), colour = "gray30") +
stat_summary(fun.y=mean, geom = "point", aes(group = Target), shape = 21, fill = "lightgrey", size=5,
position = position_jitter(width = .1, height=0)) +
stat_summary(fun.data=mean_se, geom = "pointrange", aes(group = OWCW), size = 1.5, colour = "red", shape = 17) +
scale_fill_manual(values=c("#CC6666", "#66CC99")) +
theme_bw(base_size=15) +
#ylim(0, 800) +
# scale_x_discrete(breaks=c("CW", "OW"), labels=c("Conventional", "Onomatopoeia")) +
xlab("") +
ylab("Mean Pitch (HZ)") +
theme(legend.position = "none",
axis.title = element_text(size=22),
axis.text = element_text(size=22),
strip.text = element_text(face="bold", size=22,lineheight=7.0))
PitchPlot <- ggplot(data = subset(IDSdata, MeanPitch > 99), mapping = aes(x = OWCW, y = log(MeanPitch))) +
# geom_rect(ymin = 165, ymax = 255,
#           xmin = -Inf, xmax = Inf, fill = 'grey') +
geom_violin(aes(fill = OWCW)) +
geom_point(shape = 1, size = 4, position = position_jitter(.1), colour = "gray30") +
stat_summary(fun.y=mean, geom = "point", aes(group = Target), shape = 21, fill = "lightgrey", size=5,
position = position_jitter(width = .1, height=0)) +
stat_summary(fun.data=mean_se, geom = "pointrange", aes(group = OWCW), size = 1.5, colour = "red", shape = 17) +
scale_fill_manual(values=c("#CC6666", "#66CC99")) +
theme_bw(base_size=15) +
#ylim(0, 800) +
# scale_x_discrete(breaks=c("CW", "OW"), labels=c("Conventional", "Onomatopoeia")) +
xlab("") +
ylab("Mean Pitch (HZ)") +
theme(legend.position = "none",
axis.title = element_text(size=22),
axis.text = element_text(size=22),
strip.text = element_text(face="bold", size=22,lineheight=7.0))
plot(PitchPlot)
colnames(regression_data)
View(globalthresholds_AOP)
colnames(globalthresholds_AOP)
View(full_thresholds)
View(comparison_data)
colnames(comparison_data)
View(all_distances)
colnames(FULLsample)
