`Corpus` = "CorpusEnglish",
`Category: verbs` = "Categoryverbs",
`Category: object words` = "Categoryobject word",
`Category: connecting words` = "Categoryconnecting words",
`Category: adjectives` = "Categorydescriptive words",
`Category: games/routines` = "Categorygames routines",
`Category: prepositions` = "Categoryprepositions",
`Category: pronouns` = "Categorypronouns",
`Category: quantifiers` = "Categoryquantifiers",
`Category: question words` = "Categoryquestion words",
`Category: onomatopoeia`= "Categorysounds",
`Category: time` = "Categorytime words",
`Category: locations` = "Categorylocations",
`Age x AoA`="Age scaled $\\times$ Aoa scaled",
`Age x Length`="Age scaled $\\times$ Length scaled",
`Age x Input frequency`="Age scaled $\\times$ Freq scaled",
`Age x EXT`="Age scaled $\\times$ EXT z",
`Age x INT`="INT z $\\times$ Age scaled"))
var_order <- c("Intercept", "INT value", "EXT value", "Age", "AoA", "Length", "Input frequency", "Corpus",
"Category: verbs",
"Category: object words",
"Category: connecting words",
"Category: adjectives",
"Category: games/routines",
"Category: prepositions",
"Category: pronouns",
"Category: quantifiers",
"Category: question words",
"Category: onomatopoeia",
"Category: time",
"Category: locations",
"Age x INT",
"Age x EXT",
"Age x AoA",
"Age x Length",
"Age x Input frequency")
table.model.summary.full <- table.model.summary.full %>%
arrange(factor(Effect, levels = var_order))
rownames(table.model.summary.full) <- NULL
thresholds_corr
thresholds_corr <- ggplot(subset(globalthresholds_corr, !is.na(estimate)),
aes(x = threshold, y = as.numeric(estimate), colour = corpus, shape = significant)) +
geom_point() +
scale_shape_manual(values = c(1, 16)) +
ylab("Spearman's rho") +
xlab("Threshold") +
guides(color=guide_legend(""), shape = "none") +
theme_bw() +
geom_vline(xintercept = 0.25, linetype = "twodash", colour = "darkgrey") +
facet_wrap(~data_type, ncol=2)
thresholds_corr
data_type_plot_bysubj <- ggplot(data = subset(regression_data, age == (AOP-1)), aes(x = age, y = INT_scaled, colour = data_type)) +
geom_point(shape = 21, position = position_jitter(.1)) +
geom_smooth(aes(fill = data_type)) +
ylab("INT value (normalised)") +
xlab("Age (months)") +
theme_bw(base_size = 18) +
theme(legend.title = element_blank()) +
facet_wrap(~Speaker, ncol=3)
data_type_plot_bysubj
data_type_plot_bysubj <- ggplot(data = subset(regression_data, age == (AOP-1)), aes(x = age, y = INT_scaled, colour = data_type)) +
geom_point(shape = 21, position = position_jitter(.1)) +
geom_smooth(aes(fill = data_type)) +
ylab("INT value (normalised)") +
xlab("Age (months)") +
theme_bw(base_size = 12) +
theme(legend.title = element_blank()) +
facet_wrap(~Speaker, ncol=3)
data_type_plot_bysubj
data_type_plot_speaker <- ggplot(data = subset(regression_data, age == (AOP-1)),
aes(x = age, y = INT_scaled, colour = data_type)) +
geom_point(shape = 21, position = position_jitter(.1)) +
geom_smooth(aes(fill = data_type)) +
ylab("INT value (normalised)") +
xlab("Age (months)") +
theme_bw(base_size = 10) +
theme(legend.title = element_blank()) +
facet_wrap(~Speaker, ncol=3)
data_type_plot_speaker
cor_deg_AOP.fig <- ggplot(globalthresholds_AOP,
aes(x = AOP, y = degree, colour = data_type)) +
geom_rect(data = subset(globalthresholds_AOP ,corpus == 'French'), aes(fill = corpus),xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf,alpha = 0.08, fill = "gray88") +
geom_point(shape = 21, size = 1, alpha = 0.5, position = position_jitter(.02)) +
scale_x_continuous(breaks = seq(from = 10, to = 30, by = 10)) +
# scale_x_discrete(breaks=NULL) +
# scale_y_discrete(breaks=NULL) +
geom_smooth(method=lm,
se=FALSE, size = 2) +
ylab("degree (z-score)") +
theme_bw() +
theme(axis.text=element_text(size=12),
legend.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(size = 8),
#legend.position = "top",
strip.text = element_text(size=9),
strip.background = element_rect(colour="black",size=1),
strip.text.x = element_text(margin = margin(.1, 0, .1, 0, "cm"))) +
facet_wrap(~Speaker, ncol=3)
cor_deg_AOP.fig
View(phon.dist.table)
col_baby <- phon.dist.table %>% unite(baby,
Gloss.x, IPAtarget.x,
sep = " /", remove = TRUE) %>%
filter(word_pos == "S1C1") %>%
dplyr::select(baby)
col_baby<- paste0(col_baby, "/")
col_balloon <- phon.dist.table %>% unite(balloon,
Gloss.y, IPAtarget.y,
sep = " /", remove = TRUE) %>%
filter(word_pos == "S1C1") %>%
dplyr::select(balloon)
stri_sub(col_balloon, 14, 1) <- ":"
col_balloon<- paste0(col_balloon, "/")
col_sky <- phon.dist.table %>% unite(sky,
Gloss, IPAtarget,
sep = " /", remove = TRUE) %>%
filter(word_pos == "S1C1") %>%
dplyr::select(sky)
col_sky<- paste0(col_sky, "/")
sum_sq_diffs <- c("S1C1", "S1C2", "S2C1", "SFC1", "Phonological Distance ($\\sum\\sqrt\\text{total}$)")
phon.dist.table.final <- phon.dist.table %>%
mutate(word_pos = sum_sq_diffs) %>% dplyr::select(word_pos,
consonant.x, features.x,
consonant.y, features.y, sum_sq_diffs_balloon,
consonant, features, sum_sq_diffs_sky) %>%
mutate(consonant.x = ifelse(is.na(consonant.x), " ", consonant.x),
features.x = ifelse(is.na(features.x), " ", features.x),
consonant.y = ifelse(is.na(consonant.y), " ", consonant.y),
features.y = ifelse(is.na(features.y), " ", features.y),
consonant = ifelse(is.na(consonant), " ", consonant),
features = ifelse(is.na(features), " ", features))
View(phon.dist.table.final)
source("prelims.R")
# load files
globalthresholds_AOP <- feather::read_feather("Data/globalthresholds_AOP.feather")
full_thresholds <- feather::read_feather("Data/full_thresholds.feather")
regression_data_lyon <- feather::read_feather("Data/regression_data_lyon.feather")
regression_data_providence <- feather::read_feather("Data/regression_data_providence.feather")
regression_data <- rbind(regression_data_lyon, regression_data_providence) %>%
group_by(Speaker, age) %>%
mutate(INT_z = scale(INT_val),
EXT_z = scale(EXT_target)) %>% ungroup()
comparison_data_P <- read_csv("Data/comparison_data_providence.csv")
comparison_data_L <- read_csv("Data/comparison_data_lyon.csv")
comparison_data <- rbind(comparison_data_P, comparison_data_L)
phon.dist.table <- read_csv("Data/phon_dist_table.csv")
globalthresholds_corr <- read_csv("Data/globalthresholds_corr.csv") %>%
mutate(significant = ifelse(p.value<.05, "sig", "non-sig"))
all_distances <- read_csv("Data/all_distances.csv")
globalthresholds_AOP_thresholdstest <- feather::read_feather("Data/globalthresholds_AOP_thresholdstest.feather")
regression_data_lyon_thresholdstest <- feather::read_feather("ignore/large_files/regression_data_lyon_thresholdstest.feather")
regression_data_providence_thresholdstest <- feather::read_feather("ignore/large_files/regression_data_providence_thresholdstest.feather")
regression_data_thresholdstest <- rbind(regression_data_lyon_thresholdstest,
regression_data_providence_thresholdstest) %>%
mutate(threshold = as.numeric(threshold)) %>% ungroup()
source("PhonologicalNetworks-Tables-SI.R")
stat_sum_df <- function(fun, geom="crossbar", ...) {
stat_summary(fun.data=fun, colour="red", geom=geom, width=0.2, ...)
}
col_baby <- phon.dist.table %>% unite(baby,
Gloss.x, IPAtarget.x,
sep = " /", remove = TRUE) %>%
filter(word_pos == "S1C1") %>%
dplyr::select(baby)
col_baby<- paste0(col_baby, "/")
col_balloon <- phon.dist.table %>% unite(balloon,
Gloss.y, IPAtarget.y,
sep = " /", remove = TRUE) %>%
filter(word_pos == "S1C1") %>%
dplyr::select(balloon)
stri_sub(col_balloon, 14, 1) <- ":"
col_balloon<- paste0(col_balloon, "/")
col_sky <- phon.dist.table %>% unite(sky,
Gloss, IPAtarget,
sep = " /", remove = TRUE) %>%
filter(word_pos == "S1C1") %>%
dplyr::select(sky)
col_sky<- paste0(col_sky, "/")
sum_sq_diffs <- c("S1C1", "S1C2", "S2C1", "SFC1", "Phonological Distance ($\\sum\\sqrt\\text{total}$)")
phon.dist.table.final <- phon.dist.table %>%
mutate(word_pos = sum_sq_diffs) %>% dplyr::select(word_pos,
consonant.x, features.x,
consonant.y, features.y, sum_sq_diffs_balloon,
consonant, features, sum_sq_diffs_sky) %>%
mutate(consonant.x = ifelse(is.na(consonant.x), " ", consonant.x),
features.x = ifelse(is.na(features.x), " ", features.x),
consonant.y = ifelse(is.na(consonant.y), " ", consonant.y),
features.y = ifelse(is.na(features.y), " ", features.y),
consonant = ifelse(is.na(consonant), " ", consonant),
features = ifelse(is.na(features), " ", features))
phon.dist.table.final
View(phon.dist.table)
col_baby <- phon.dist.table %>% unite(baby,
Gloss.x, IPAtarget.x,
sep = " /", remove = TRUE) %>%
filter(word_pos == "S1C1") %>%
dplyr::select(baby)
col_baby<- paste0(col_baby, "/")
col_balloon <- phon.dist.table %>% unite(balloon,
Gloss.y, IPAtarget.y,
sep = " /", remove = TRUE) %>%
filter(word_pos == "S1C1") %>%
dplyr::select(balloon)
col_baby <- phon.dist.table %>% unite(baby,
Gloss.x, IPAtarget.x,
sep = " /", remove = TRUE) %>%
filter(word_pos == "S1C1") %>%
dplyr::select(baby)
col_baby<- paste0(col_baby, "/")
col_balloon <- phon.dist.table %>% unite(balloon,
Gloss.y, IPAtarget.y,
sep = " /", remove = TRUE) %>%
filter(word_pos == "S1C1") %>%
dplyr::select(balloon)
stri_sub(col_balloon, 14, 1) <- ":"
col_balloon<- paste0(col_balloon, "/")
col_sky <- phon.dist.table %>% unite(sky,
Gloss, IPAtarget,
sep = " /", remove = TRUE) %>%
filter(word_pos == "S1C1") %>%
dplyr::select(sky)
col_sky<- paste0(col_sky, "/")
sum_sq_diffs <- c("S1C1", "S1C2", "S2C1", "SFC1", "Phonological Distance ($\\sum\\sqrt\\text{total}$)")
phon.dist.table.final <- phon.dist.table %>%
mutate(word_pos = sum_sq_diffs) %>% dplyr::select(word_pos,
consonant.x, features.x,
consonant.y, features.y, sum_sq_diffs_balloon,
consonant, features, sum_sq_diffs_sky) %>%
mutate(consonant.x = ifelse(is.na(consonant.x), " ", consonant.x),
features.x = ifelse(is.na(features.x), " ", features.x),
consonant.y = ifelse(is.na(consonant.y), " ", consonant.y),
features.y = ifelse(is.na(features.y), " ", features.y),
consonant = ifelse(is.na(consonant), " ", consonant),
features = ifelse(is.na(features), " ", features))
View(phon.dist.table.final)
phon.dist.table.balloon <- phon.dist.table.full %>%
mutate(word_pos = sum_sq_diffs) %>% dplyr::select(word_pos,
consonant.x, features.x,
consonant.y, features.y, sum_sq_diffs_balloon) %>%
mutate(consonant.x = ifelse(is.na(consonant.x), " ", consonant.x),
features.x = ifelse(is.na(features.x), " ", features.x),
consonant.y = ifelse(is.na(consonant.y), " ", consonant.y),
features.y = ifelse(is.na(features.y), " ", features.y))
phon.dist.table.full <- phon.dist.table %>%
mutate(word_pos = sum_sq_diffs) %>% dplyr::select(word_pos,
consonant.x, features.x,
consonant.y, features.y, sum_sq_diffs_balloon,
consonant, features, sum_sq_diffs_sky) %>%
mutate(consonant.x = ifelse(is.na(consonant.x), " ", consonant.x),
features.x = ifelse(is.na(features.x), " ", features.x),
consonant.y = ifelse(is.na(consonant.y), " ", consonant.y),
features.y = ifelse(is.na(features.y), " ", features.y),
consonant = ifelse(is.na(consonant), " ", consonant),
features = ifelse(is.na(features), " ", features))
phon.dist.table.balloon <- phon.dist.table.full %>%
mutate(word_pos = sum_sq_diffs) %>% dplyr::select(word_pos,
consonant.x, features.x,
consonant.y, features.y, sum_sq_diffs_balloon) %>%
mutate(consonant.x = ifelse(is.na(consonant.x), " ", consonant.x),
features.x = ifelse(is.na(features.x), " ", features.x),
consonant.y = ifelse(is.na(consonant.y), " ", consonant.y),
features.y = ifelse(is.na(features.y), " ", features.y))
View(phon.dist.table.balloon)
phon.dist.table.sky <- phon.dist.table.full %>%
mutate(word_pos = sum_sq_diffs) %>% dplyr::select(word_pos,
consonant.x, features.x,
consonant, features, sum_sq_diffs_sky) %>%
mutate(consonant.x = ifelse(is.na(consonant.x), " ", consonant.x),
features.x = ifelse(is.na(features.x), " ", features.x),
consonant = ifelse(is.na(consonant), " ", consonant),
features = ifelse(is.na(features), " ", features))
View(phon.dist.table.sky)
phon.dist.table.full <- phon.dist.table %>%
mutate(word_pos = sum_sq_diffs) %>% dplyr::select(word_pos,
consonant.x, features.x,
consonant.y, features.y, sum_sq_diffs_balloon,
consonant, features, sum_sq_diffs_sky) %>%
mutate(consonant.x = ifelse(is.na(consonant.x), " ", consonant.x),
features.x = ifelse(is.na(features.x), " ", features.x),
consonant.y = ifelse(is.na(consonant.y), " ", consonant.y),
features.y = ifelse(is.na(features.y), " ", features.y),
consonant = ifelse(is.na(consonant), " ", consonant),
features = ifelse(is.na(features), " ", features))
View(phon.dist.table.full)
phon.dist.table.full <- phon.dist.table %>%
mutate(word_pos = sum_sq_diffs) %>% dplyr::select(word_pos,
consonant.x, features.x,
consonant.y, features.y, sum_sq_diffs_balloon,
consonant, features, sum_sq_diffs_sky) %>%
mutate(consonant.x = ifelse(is.na(consonant.x), " ", consonant.x),
features.x = ifelse(is.na(features.x), " ", features.x),
consonant.y = ifelse(is.na(consonant.y), " ", consonant.y),
features.y = ifelse(is.na(features.y), " ", features.y),
consonant = ifelse(is.na(consonant), " ", consonant),
features = ifelse(is.na(features), " ", features),
sum_sq_diffs_balloon = round(sum_sq_diffs_balloon, 2),
sum_sq_diffs_sky = round(sum_sq_diffs_sky, 2))
View(phon.dist.table)
phon.dist.table.full <- phon.dist.table %>%
mutate(word_pos = sum_sq_diffs) %>% dplyr::select(word_pos,
consonant.x, features.x,
consonant.y, features.y, sum_sq_diffs_balloon,
consonant, features, sum_sq_diffs_sky) %>%
mutate(consonant.x = ifelse(is.na(consonant.x), " ", consonant.x),
features.x = ifelse(is.na(features.x), " ", features.x),
consonant.y = ifelse(is.na(consonant.y), " ", consonant.y),
features.y = ifelse(is.na(features.y), " ", features.y),
consonant = ifelse(is.na(consonant), " ", consonant),
features = ifelse(is.na(features), " ", features),
sum_sq_diffs_balloon = as.numeric(sum_sq_diffs_balloon),
sum_sq_diffs_sky = as.numeric(sum_sq_diffs_sky),
sum_sq_diffs_balloon = round(sum_sq_diffs_balloon, 2),
sum_sq_diffs_sky = round(sum_sq_diffs_sky, 2))
phon.dist.table.full <- phon.dist.table %>%
mutate(word_pos = sum_sq_diffs) %>% dplyr::select(word_pos,
consonant.x, features.x,
consonant.y, features.y, sum_sq_diffs_balloon,
consonant, features, sum_sq_diffs_sky) %>%
mutate(consonant.x = ifelse(is.na(consonant.x), " ", consonant.x),
features.x = ifelse(is.na(features.x), " ", features.x),
consonant.y = ifelse(is.na(consonant.y), " ", consonant.y),
features.y = ifelse(is.na(features.y), " ", features.y),
consonant = ifelse(is.na(consonant), " ", consonant))
cor.deg.AOP.fig <- ggplot(globalthresholds_AOP,
aes(x = AOP, y = degree, colour = data_type)) +
geom_rect(data = subset(globalthresholds_AOP ,corpus == 'French'), aes(fill = corpus),xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf,alpha = 0.08, fill = "gray88") +
geom_point(shape = 21, size = 1, alpha = 0.5, position = position_jitter(.02)) +
scale_x_continuous(breaks = seq(from = 10, to = 30, by = 10)) +
geom_smooth(method=lm,
se=FALSE, size = 2) +
ylab("degree (z-score)") +
theme_bw(base_size = 12) +
theme(axis.text=element_text(size=12),
legend.title = element_blank(),
legend_position = "bottom") +
facet_wrap(~Speaker, ncol=3)
cor.deg.AOP.fig
cor.deg.AOP.fig <- ggplot(globalthresholds_AOP,
aes(x = AOP, y = degree, colour = data_type)) +
geom_rect(data = subset(globalthresholds_AOP ,corpus == 'French'), aes(fill = corpus),xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf,alpha = 0.08, fill = "gray88") +
geom_point(shape = 21, size = 1, alpha = 0.5, position = position_jitter(.02)) +
scale_x_continuous(breaks = seq(from = 10, to = 30, by = 10)) +
geom_smooth(method=lm,
se=FALSE, size = 2) +
ylab("degree (z-score)") +
theme_bw(base_size = 12) +
theme(axis.text=element_text(size=12),
legend.title = element_blank(),
legend.position = "bottom") +
facet_wrap(~Speaker, ncol=3)
cor.deg.AOP.fig
data.type.plot.bysubj <- ggplot(data = subset(regression_data, age == (AOP-1)), aes(x = age, y = INT_scaled, colour = data_type)) +
geom_rect(data = subset(globalthresholds_AOP ,corpus == 'French'), aes(fill = corpus),xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf,alpha = 0.08, fill = "gray88") +
geom_point(shape = 21, position = position_jitter(.1)) +
geom_smooth(aes(fill = data_type)) +
ylab("INT value (normalised)") +
xlab("Age (months)") +
theme_bw(base_size = 12) +
theme(legend.title = element_blank(),
legend.position = "bottom") +
facet_wrap(~Speaker, ncol=3)
data.type.plot.bysubj
data.type.plot.bysubj <- ggplot(data = subset(regression_data, age == (AOP-1)), aes(x = age, y = INT_scaled, colour = data_type)) +
geom_rect(data = subset(globalthresholds_AOP ,corpus == 'French'), aes(fill = corpus),xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf,alpha = 0.08, fill = "gray88") +
geom_point(shape = 21, position = position_jitter(.1)) +
geom_smooth(aes(fill = data_type)) +
ylab("INT value (normalised)") +
xlab("Age (months)") +
theme_bw(base_size = 12) +
theme(legend.title = element_blank(),
legend.position = "bottom") +
facet_wrap(~Speaker, ncol=3)
data.type.plot.bysubj
data.type.plot.bysubj <- ggplot(data = subset(regression_data, age == (AOP-1)), aes(x = age, y = INT_scaled, colour = data_type)) +
# geom_rect(data = subset(globalthresholds_AOP ,corpus == 'French'), aes(fill = corpus),xmin = -Inf,xmax = Inf,
#           ymin = -Inf,ymax = Inf,alpha = 0.08, fill = "gray88") +
geom_point(shape = 21, position = position_jitter(.1)) +
geom_smooth(aes(fill = data_type)) +
ylab("INT value (normalised)") +
xlab("Age (months)") +
theme_bw(base_size = 12) +
theme(legend.title = element_blank(),
legend.position = "bottom") +
facet_wrap(~Speaker, ncol=3)
data.type.plot.bysubj
data.type.plot.bysubj <- ggplot(data = subset(regression_data, age == (AOP-1)), aes(x = age, y = INT_scaled, colour = data_type)) +
geom_rect(data = subset(regression_data ,corpus == 'French'), aes(fill = corpus),xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf,alpha = 0.08, fill = "gray88") +
geom_point(shape = 21, position = position_jitter(.1)) +
geom_smooth(aes(fill = data_type)) +
ylab("INT value (normalised)") +
xlab("Age (months)") +
theme_bw(base_size = 12) +
theme(legend.title = element_blank(),
legend.position = "bottom") +
facet_wrap(~Speaker, ncol=3)
data.type.plot.bysubj
FULLsample <- read_csv("Data/FULLsample.csv")
View(FULLsample)
gc()
source("prelims.R")
# load files
globalthresholds_AOP <- feather::read_feather("Data/globalthresholds_AOP.feather")
full_thresholds <- feather::read_feather("Data/full_thresholds.feather")
regression_data_lyon <- feather::read_feather("Data/regression_data_lyon.feather")
regression_data_providence <- feather::read_feather("Data/regression_data_providence.feather")
regression_data <- rbind(regression_data_lyon, regression_data_providence) %>%
group_by(Speaker, age) %>%
mutate(INT_z = scale(INT_val),
EXT_z = scale(EXT_target)) %>% ungroup()
comparison_data_P <- read_csv("Data/comparison_data_providence.csv")
comparison_data_L <- read_csv("Data/comparison_data_lyon.csv")
comparison_data <- rbind(comparison_data_P, comparison_data_L)
phon.dist.table <- read_csv("Data/phon_dist_table.csv")
globalthresholds_corr <- read_csv("Data/globalthresholds_corr.csv") %>%
mutate(significant = ifelse(p.value<.05, "sig", "non-sig"))
all_distances <- read_csv("Data/all_distances.csv")
globalthresholds_AOP_thresholdstest <- feather::read_feather("Data/globalthresholds_AOP_thresholdstest.feather")
regression_data_lyon_thresholdstest <- feather::read_feather("ignore/large_files/regression_data_lyon_thresholdstest.feather")
regression_data_providence_thresholdstest <- feather::read_feather("ignore/large_files/regression_data_providence_thresholdstest.feather")
regression_data_thresholdstest <- rbind(regression_data_lyon_thresholdstest,
regression_data_providence_thresholdstest) %>%
mutate(threshold = as.numeric(threshold)) %>% ungroup()
source("PhonologicalNetworks-Tables-SI.R")
stat_sum_df <- function(fun, geom="crossbar", ...) {
stat_summary(fun.data=fun, colour="red", geom=geom, width=0.2, ...)
}
col_baby <- phon.dist.table %>% unite(baby,
Gloss.x, IPAtarget.x,
sep = " /", remove = TRUE) %>%
filter(word_pos == "S1C1") %>%
dplyr::select(baby)
col_baby<- paste0(col_baby, "/")
col_balloon <- phon.dist.table %>% unite(balloon,
Gloss.y, IPAtarget.y,
sep = " /", remove = TRUE) %>%
filter(word_pos == "S1C1") %>%
dplyr::select(balloon)
stri_sub(col_balloon, 14, 1) <- ":"
col_balloon<- paste0(col_balloon, "/")
col_sky <- phon.dist.table %>% unite(sky,
Gloss, IPAtarget,
sep = " /", remove = TRUE) %>%
filter(word_pos == "S1C1") %>%
dplyr::select(sky)
col_sky<- paste0(col_sky, "/")
sum_sq_diffs <- c("S1C1", "S1C2", "S2C1", "S2CF", "Phonological Distance ($\\sum\\sqrt\\text{total}$)")
phon.dist.table.full <- phon.dist.table %>%
mutate(word_pos = sum_sq_diffs) %>% dplyr::select(word_pos,
consonant.x, features.x,
consonant.y, features.y, sum_sq_diffs_balloon,
consonant, features, sum_sq_diffs_sky) %>%
mutate(consonant.x = ifelse(is.na(consonant.x), " ", consonant.x),
features.x = ifelse(is.na(features.x), " ", features.x),
consonant.y = ifelse(is.na(consonant.y), " ", consonant.y),
features.y = ifelse(is.na(features.y), " ", features.y),
consonant = ifelse(is.na(consonant), " ", consonant))
phon.dist.table.balloon <- phon.dist.table.full %>%
mutate(word_pos = sum_sq_diffs) %>% dplyr::select(word_pos,
consonant.x, features.x,
consonant.y, features.y, sum_sq_diffs_balloon) %>%
mutate(consonant.x = ifelse(is.na(consonant.x), " ", consonant.x),
features.x = ifelse(is.na(features.x), " ", features.x),
consonant.y = ifelse(is.na(consonant.y), " ", consonant.y),
features.y = ifelse(is.na(features.y), " ", features.y))
phon.dist.table.sky <- phon.dist.table.full %>%
mutate(word_pos = sum_sq_diffs) %>% dplyr::select(word_pos,
consonant.x, features.x,
consonant, features, sum_sq_diffs_sky) %>%
mutate(consonant.x = ifelse(is.na(consonant.x), " ", consonant.x),
features.x = ifelse(is.na(features.x), " ", features.x),
consonant = ifelse(is.na(consonant), " ", consonant),
features = ifelse(is.na(features), " ", features))
phon.dist.table.balloon
phon.dist.table.sky
cor.deg.AOP.fig <- ggplot(globalthresholds_AOP,
aes(x = AOP, y = degree, colour = data_type)) +
geom_rect(data = subset(globalthresholds_AOP ,corpus == 'French'), aes(fill = corpus),xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf,alpha = 0.08, fill = "gray88") +
geom_point(shape = 21, size = 1, alpha = 0.5, position = position_jitter(.02)) +
scale_x_continuous(breaks = seq(from = 10, to = 30, by = 10)) +
geom_smooth(method=lm) +
ylab("degree (z-score)") +
theme_bw(base_size = 12) +
theme(axis.text=element_text(size=12),
legend.title = element_blank(),
legend.position = "bottom") +
facet_wrap(~Speaker, ncol=3)
cor.deg.AOP.fig
cor.deg.AOP.fig <- ggplot(globalthresholds_AOP,
aes(x = AOP, y = degree, colour = data_type, fill = data_type)) +
geom_rect(data = subset(globalthresholds_AOP ,corpus == 'French'), aes(fill = corpus),xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf,alpha = 0.08, fill = "gray88") +
geom_point(shape = 21, size = 1, alpha = 0.5, position = position_jitter(.02)) +
scale_x_continuous(breaks = seq(from = 10, to = 30, by = 10)) +
geom_smooth(method=lm) +
ylab("degree (z-score)") +
theme_bw(base_size = 12) +
theme(axis.text=element_text(size=12),
legend.title = element_blank(),
legend.position = "bottom") +
facet_wrap(~Speaker, ncol=3)
cor.deg.AOP.fig
gc()
install.packages("bookdown")
